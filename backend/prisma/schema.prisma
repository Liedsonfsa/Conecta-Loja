// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuario {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100) // Limite de 100 caracteres
  email     String   @unique @db.VarChar(255) // Email único e limite de 255 caracteres
  password  String   @db.VarChar(255) // Hash da senha (bcrypt)
  contact   String   @db.VarChar(20) // Contato/telefone com limite de 20 caracteres
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  enderecos endereco[] // UM usuário pode ter VÁRIOS endereços

  @@map("usuarios")
}

model endereco {
  id                   Int      @id @default(autoincrement())
  cep                  String   @db.VarChar(10)  // CEP (XXXXX-XXX)
  logradouro           String   @db.VarChar(255) // Nome da rua/avenida
  numero               String   @db.VarChar(10)  // Número do endereço
  complemento          String?  @db.VarChar(100) // Complemento (opcional)
  informacoes_adicionais String? @db.VarChar(255) // Informações adicionais (opcional)
  bairro               String   @db.VarChar(100) // Bairro/distrito
  cidade               String   @db.VarChar(100) // Cidade
  estado               String   @db.VarChar(2)   // Estado (UF - 2 letras)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Foreign Key para usuário
  usuarioId Int
  usuario   usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("enderecos")
}

model funcionario {
  id       Int    @id @default(autoincrement())
  name     String
  email    String
  password String
  role     String

  lojaId   Int
  loja     store @relation(fields: [lojaId], references: [id])
}

model store {
  id            Int           @id @default(autoincrement())
  name          String
  contact       String
  email         String
  description   String
  image         String?

  funcionarios  funcionario[] // UMA loja pode ter VÁRIOS funcionários
}

// Enum for discount type
enum DiscountType {
  PERCENTAGE
  FIXED_VALUE
}

// Product category model
model category {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  activeProducts  Int       @default(0)  // Active products counter
  totalValue      Decimal   @default(0)  @db.Decimal(10, 2) // Total value of products in stock
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  products        product[] // One category can have MANY products

  @@map("categoria")
}

// Product model
model product {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  price           Decimal       @db.Decimal(10, 2) // Unit price
  categoryId      Int
  available       Boolean       @default(true) // Flag if product is available
  image           String?       // Image URL or path
  discount        Decimal?      @db.Decimal(10, 2) // Discount value
  discountType    DiscountType? // Applied discount type
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  category        category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("produto")
}